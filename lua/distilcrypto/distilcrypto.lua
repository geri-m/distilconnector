-- Code generated by Rust Lua interface. DO NOT EDIT.

    local ffi = require("ffi")

    ffi.cdef[[
    


            typedef struct {
                    const char * iv;
    const char * payload;
    const char * hmac;
            } libdistilcrypto__EncryptedData;
            
typedef struct {
    const libdistilcrypto__EncryptedData *ok;
    const char * *err;
} libdistilcrypto__Result_EncryptedData___string_ptr;
typedef struct {
    const char * *ok;
    const char * *err;
} libdistilcrypto__Result___string_ptr___string_ptr;
int32_t encrypt(
        const char *,
    const char *,
    libdistilcrypto__Result_EncryptedData___string_ptr**);
int32_t __gc_encrypt(
        libdistilcrypto__Result_EncryptedData___string_ptr*);
int32_t decrypt(
        const libdistilcrypto__EncryptedData*,
    const char *,
    libdistilcrypto__Result___string_ptr___string_ptr**);
int32_t __gc_decrypt(
        libdistilcrypto__Result___string_ptr___string_ptr*);

    ]]

    local rust = ffi.load('distilcrypto')

    local M = {}

    

local __const_c_typename___string_ptr = ffi.typeof("const char *[?]")
local __c_function_argument___string_ptr = ffi.typeof("const char *[?]")
local __c_mut_function_argument___string_ptr = ffi.typeof("char *[?]")


local __typename_EncryptedData = ffi.metatype("libdistilcrypto__EncryptedData", {})
local __const_c_typename_EncryptedData = ffi.typeof("const libdistilcrypto__EncryptedData[?]")
local __c_function_argument_EncryptedData = ffi.typeof("const libdistilcrypto__EncryptedData*[?]")
local __c_mut_function_argument_EncryptedData = ffi.typeof("libdistilcrypto__EncryptedData*[?]")


local __typename_Result_EncryptedData___string_ptr = ffi.metatype("libdistilcrypto__Result_EncryptedData___string_ptr", {})
local __const_c_typename_Result_EncryptedData___string_ptr = ffi.typeof("const libdistilcrypto__Result_EncryptedData___string_ptr[?]")
local __c_function_argument_Result_EncryptedData___string_ptr = ffi.typeof("const libdistilcrypto__Result_EncryptedData___string_ptr*[?]")
local __c_mut_function_argument_Result_EncryptedData___string_ptr = ffi.typeof("libdistilcrypto__Result_EncryptedData___string_ptr*[?]")


local __typename_Result___string_ptr___string_ptr = ffi.metatype("libdistilcrypto__Result___string_ptr___string_ptr", {})
local __const_c_typename_Result___string_ptr___string_ptr = ffi.typeof("const libdistilcrypto__Result___string_ptr___string_ptr[?]")
local __c_function_argument_Result___string_ptr___string_ptr = ffi.typeof("const libdistilcrypto__Result___string_ptr___string_ptr*[?]")
local __c_mut_function_argument_Result___string_ptr___string_ptr = ffi.typeof("libdistilcrypto__Result___string_ptr___string_ptr*[?]")

function M.encrypt(
    data,
    key)
    local __typeof = __c_mut_function_argument_Result_EncryptedData___string_ptr
    local __ret_ptr = __typeof(1, {})
    local status = rust.encrypt(
        (function(value) return value end)(data),
    (function(value) return value end)(key),
    __ret_ptr
    )
    if status ~= 0 then
        error("encrypt failed with status "..status)
    end
    local __ret = __ret_ptr[0]
    ffi.gc(__ret, rust.__gc_encrypt)
    local f = function(value)
    if value.ok ~= nil then
        local f = function(value)
                return {
                    iv = (ffi.string)(value.iv), payload = (ffi.string)(value.payload), hmac = (ffi.string)(value.hmac)
                }
            end
        return f(value.ok[0])
    else
        local f = ffi.string
        return nil, f(value.err[0])
    end
end
    return f(__ret)
end

function M.decrypt(
    encrypted,
    key)
    local __typeof = __c_mut_function_argument_Result___string_ptr___string_ptr
    local __ret_ptr = __typeof(1, {})
    local status = rust.decrypt(
        (function(value)
                return __typename_EncryptedData(
                    (function(value) return value end)(value.iv),
    (function(value) return value end)(value.payload),
    (function(value) return value end)(value.hmac)
                )
            end)(encrypted),
    (function(value) return value end)(key),
    __ret_ptr
    )
    if status ~= 0 then
        error("decrypt failed with status "..status)
    end
    local __ret = __ret_ptr[0]
    ffi.gc(__ret, rust.__gc_decrypt)
    local f = function(value)
    if value.ok ~= nil then
        local f = ffi.string
        return f(value.ok[0])
    else
        local f = ffi.string
        return nil, f(value.err[0])
    end
end
    return f(__ret)
end


    return M
    
